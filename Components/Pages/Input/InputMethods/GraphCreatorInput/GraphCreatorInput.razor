@page "/input/graphcreator/{ProblemName}"
@using Drawer.GraphDrawer
@using ProblemResolver.Converters
@using ProjektZaliczeniowy_AiSD2.Components.Pages.Input.InputMethods.GraphCreatorInput.Validator
@using ProjektZaliczeniowy_AiSD2.Components.States
@inherits InputMethodBase;
@inject NavigationManager Navigator;
@inject IProblemState ProblemState;

<div class="graph-creator">
    <ReturnButton/>
    <div class="click_handler" @onclick="OnCreatorClick">
        <GraphCanvas EnableZoom="false" Data="_currentData" @ref="_canvas"/>
    </div>
    <GraphCreatorToolbox
        OnToolSelect="OnToolSelect"
        SelectedMode="_currentMode"
        AllowVertexValueChange="_problemSettings.CanChangeVertexValue"/>
    <GraphCreatorToolContinue OnContinue="OnContinue"/>
</div>


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private GraphData _currentData = new();

    private GraphCreatorMode _currentMode = GraphCreatorMode.AddVertex;

    private GraphVertex? _selectedVertex;

    private GraphState? _prevSelectedState;

    private GraphCanvas? _canvas;

    private GraphCreatorProblemSettings _problemSettings;

    protected override void OnInitialized()
    {
        _problemSettings = GraphCreatorProblemSettingsProvider.GetSettingsForProblem(ProblemName);
    }

    private async void OnCreatorClick(MouseEventArgs obj)
    {
        var mouseX = Convert.ToInt32(obj.ClientX);
        var mouseY = Convert.ToInt32(obj.ClientY);

        if (_canvas is null)
            return;

        switch (_currentMode)
        {
            case GraphCreatorMode.AddVertex:
                OnAddVertex(mouseX, mouseY);
                break;
            case GraphCreatorMode.ConnectFirstEdge:
                OnConnectFirstEdge(mouseX, mouseY);
                break;
            case GraphCreatorMode.ConnectSecondEdge:
                OnConnectSecondEdge(mouseX, mouseY);
                break;
            case GraphCreatorMode.ChangeVertexValue:
                await OnChangeVertexValue(mouseX, mouseY);
                break;
            case GraphCreatorMode.SelectSpecialVertex:
                SelectSpecialVertex(mouseX, mouseY);
                break;
            case GraphCreatorMode.Remove:
                OnRemoveVertex(mouseX, mouseY);
                break;
        }

        _canvas.ChangeGraphData(_currentData);
    }

    private void SelectSpecialVertex(in int mouseX, in int mouseY)
    {
        _selectedVertex = GetSelectedVertex(mouseX, mouseY);

        if (_selectedVertex is null) return;

        foreach (var vertex in _currentData.Vertices.Where(vertex => vertex.State == GraphStates.Special))
            vertex.State = GraphStates.Inactive;

        _selectedVertex.State = GraphStates.Special;
    }

    private void OnAddVertex(in int mouseX, in int mouseY)
    {
        _currentData.AddVertex(
            new GraphVertex(mouseX, mouseY));
    }

    private void OnConnectFirstEdge(in int mouseX, in int mouseY)
    {
        _selectedVertex = GetSelectedVertex(mouseX, mouseY);

        if (_selectedVertex is null) return;


        _prevSelectedState = _selectedVertex.State;
        _selectedVertex.State = GraphStates.Highlighted;
        _currentMode = GraphCreatorMode.ConnectSecondEdge;
    }

    private void OnConnectSecondEdge(in int mouseX, in int mouseY)
    {
        var anotherSelectedVertex = GetSelectedVertex(mouseX, mouseY);

        if (anotherSelectedVertex is null || _selectedVertex is null)
            return;

        if (_selectedVertex == anotherSelectedVertex)
            return;

        if (_currentData.Edges.Exists((v) => v.From == _selectedVertex && v.To == anotherSelectedVertex))
            return;

        _currentData.AddEdge(new(_selectedVertex, anotherSelectedVertex, directed: _problemSettings.DirectedGraph));
        _currentMode = GraphCreatorMode.ConnectFirstEdge;
        _selectedVertex.State = _prevSelectedState ?? GraphStates.Inactive;
        _selectedVertex = null;
    }

    private async Task OnChangeVertexValue(int mouseX, int mouseY)
    {
        _selectedVertex = GetSelectedVertex(mouseX, mouseY);
        if (_selectedVertex is null)
            return;

        var parameters = new ModalParameters().Add(nameof(ChangeVertexValueModal.Number), int.Parse(_selectedVertex.Value ?? "0"));
        var result = await Modal.Show<ChangeVertexValueModal>(parameters, new ModalOptions { Size = ModalSize.Medium }).Result;

        _selectedVertex.Value = result.Data?.ToString();
    }

    private void OnRemoveVertex(in int mouseX, in int mouseY)
    {
        _selectedVertex = GetSelectedVertex(mouseX, mouseY);
        if (_selectedVertex is not null)
            _currentData.DeleteVertexAndAssociatedEdges(_selectedVertex);
    }

    private GraphVertex? GetSelectedVertex(int mouseX, int mouseY)
    {
        return _currentData.Vertices.FirstOrDefault(vertex =>
            CheckVertexXCoordinates(mouseX, vertex) && CheckVertexYCoordinates(mouseY, vertex));
    }

    private bool CheckVertexXCoordinates(int mouseX, GraphVertex vertex)
    {
        return (mouseX < (vertex.X + 25)) && (mouseX > (vertex.X - 25));
    }

    private bool CheckVertexYCoordinates(int mouseY, GraphVertex vertex)
    {
        return (mouseY < (vertex.Y + 25)) && (mouseY > (vertex.Y - 25));
    }

    private void OnToolSelect(GraphCreatorMode newMode)
    {
        _selectedVertex = null;
        _currentMode = newMode;
        StateHasChanged();
    }

    private async void OnContinue()
    {
        var problemInput = GraphDataToProblem.Convert(_currentData);

        var errors = GraphInputValidator.Validate(_problemSettings.Modes, problemInput, _problemSettings.DirectedGraph);
        if (errors.Count > 0)
        {
            ShowValidatorErrorModal(errors);
            return;
        }

        await ProblemState.SetProblemInputData(problemInput);
        Navigator.NavigateTo($"/input/additional/{ProblemName}", true);
    }

    private void ShowValidatorErrorModal(List<GraphValidatorError> errors)
    {
        var parameters = new ModalParameters().Add(nameof(GraphValidatorErrorsModal.Errors), errors);
        Modal.Show<GraphValidatorErrorsModal>("", parameters, new ModalOptions() { Size = ModalSize.Medium });
    }

}